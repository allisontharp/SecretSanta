{"version":3,"sources":["ng://ngm-bootstrap-modal/lib/dialog-wrapper.component.ts","ng://ngm-bootstrap-modal/lib/dialog-holder.component.ts","ng://ngm-bootstrap-modal/lib/dialog.service.ts","ng://ngm-bootstrap-modal/lib/ngm-bootstrap-modal.module.ts","ng://ngm-bootstrap-modal/lib/dialog.component.ts"],"names":["DialogWrapperComponent","resolver","dialogService","this","prototype","addComponent","component","customFactory","factory","resolveComponentFactory","injector","ReflectiveInjector","fromResolvedProviders","element","componentRef","create","insert","hostView","content","wrapper","closeByClickOutside","_this","containerEl","container","nativeElement","querySelector","addEventListener","event","stopPropagation","removeDialog","Component","args","selector","template","ComponentFactoryResolver","DialogService","ViewChild","static","read","ViewContainerRef","DialogHolderComponent","dialogs","addDialog","data","options","dialogWrapper","createComponent","index","_component","splice","push","setTimeout","classList","add","autoCloseTimeout","closeByClickingOutside","backdropColor","style","backgroundColor","fillData","remove","_removeElement","indexOf","clear","DialogServiceConfig","applicationRef","config","dialogHolderComponent","createDialogHolder","removeAll","body","document","componentRootNode","rootNodes","componentRootViewContainer","components","attachView","onDestroy","detachView","appendChild","instance","Injectable","ApplicationRef","Injector","decorators","type","Optional","dialogServiceFactory","NgmBootstrapModalModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule","declarations","imports","CommonModule","entryComponents","DialogComponent","keys","Object","i","length_1","length","key","Observable","observer","close","ngOnDestroy","next","result"],"mappings":"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","sourcesContent":["import {\n  Component,\n  ViewContainerRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ReflectiveInjector,\n  Type,\n  ComponentFactory,\n  Provider,\n  Injector,\n  ResolvedReflectiveProvider\n} from '@angular/core';\nimport { DialogComponent } from './dialog.component';\nimport { DialogService } from './dialog.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'dialog-wrapper',\n  template: `\n      <div #container class=\"modal fade\" style=\"display:block !important;\" role=\"dialog\">\n          <ng-template #element></ng-template>\n      </div>\n  `\n})\nexport class DialogWrapperComponent {\n\n  /**\n   * Target element to insert dialog content component\n   */\n  @ViewChild('element', {static: true, read: ViewContainerRef}) public element: ViewContainerRef;\n\n  /**\n   * Link container DOM element\n   */\n  @ViewChild('container', {static: true}) public container;\n\n  /**\n   * Dialog content componet\n   */\n  private content: DialogComponent<any, any>;\n\n  /**\n   * Constructor\n   * @param resolver resolver\n   * @param dialogService dialogService\n   */\n  constructor(private resolver: ComponentFactoryResolver, private dialogService: DialogService) {\n  }\n\n  /**\n   * Adds content dialog component to wrapper\n   * @return DialogComponent\n   * @param component component\n   * @param customFactory customFactory\n   */\n  addComponent<T, T1>(component: Type<DialogComponent<T, T1>>, customFactory?: ComponentFactory<{}>) {\n    const factory = customFactory || this.resolver.resolveComponentFactory(component);\n    const injector = ReflectiveInjector.fromResolvedProviders([], this.element.injector);\n    const componentRef = factory.create(injector);\n    this.element.insert(componentRef.hostView);\n    this.content = componentRef.instance as DialogComponent<T, T1>;\n    this.content.wrapper = this;\n    return this.content;\n  }\n\n  /**\n   * Registers event handler to close dialog by click on backdrop\n   */\n  closeByClickOutside() {\n    const containerEl = this.container.nativeElement;\n    containerEl.querySelector('.modal-content').addEventListener('click', (event) => {\n      event.stopPropagation();\n    });\n    containerEl.addEventListener('click', () => {\n      this.dialogService.removeDialog(this.content);\n    }, false);\n  }\n}\n","import { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, Type } from '@angular/core';\nimport { DialogComponent } from './dialog.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { DialogOptions } from './dialog.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'dialog-holder',\n  template: '<ng-template #element></ng-template>',\n})\nexport class DialogHolderComponent {\n\n  /**\n   * Target element to insert dialogs\n   */\n  @ViewChild('element', {static: true, read: ViewContainerRef}) public element: ViewContainerRef;\n\n  /**\n   * Array of dialogs\n   */\n  dialogs: Array<DialogComponent<any, any>> = [];\n\n  /**\n   * Constructor\n   * @param resolver ComponentFactoryResolver\n   */\n  constructor(private resolver: ComponentFactoryResolver) {\n  }\n\n  /**\n   * Adds dialog\n   * @param component Type<DialogComponent>\n   * @param data object?\n   * @param options DialogOptions?\n   * @return Observable<*>\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    options = options || {} as DialogOptions;\n    const factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);\n    const componentRef = this.element.createComponent(factory, options.index);\n    const dialogWrapper: DialogWrapperComponent = componentRef.instance as DialogWrapperComponent;\n    // tslint:disable-next-line:variable-name\n    const _component: DialogComponent<T, T1> = dialogWrapper.addComponent(component, options.customFactory);\n    if (typeof (options.index) !== 'undefined') {\n      this.dialogs.splice(options.index, 0, _component);\n    } else {\n      this.dialogs.push(_component);\n    }\n    setTimeout(() => {\n      dialogWrapper.container.nativeElement.classList.add('show');\n      dialogWrapper.container.nativeElement.classList.add('in');\n    });\n    if (options.autoCloseTimeout) {\n      setTimeout(() => {\n        this.removeDialog(_component);\n      }, options.autoCloseTimeout);\n    }\n    if (options.closeByClickingOutside) {\n      dialogWrapper.closeByClickOutside();\n    }\n    if (options.backdropColor) {\n      dialogWrapper.container.nativeElement.style.backgroundColor = options.backdropColor;\n    }\n    return _component.fillData(data);\n  }\n\n  /**\n   * Removes dialog\n   * @param component DialogComponent\n   */\n  removeDialog(component: DialogComponent<any, any>) {\n    const element = component.wrapper.container.nativeElement;\n\n    element.classList.remove('show');\n    element.classList.remove('in');\n    setTimeout(() => {\n      this._removeElement(component);\n    }, 300);\n  }\n\n  private _removeElement(component) {\n    const index = this.dialogs.indexOf(component);\n    if (index > -1) {\n      this.element.remove(index);\n      this.dialogs.splice(index, 1);\n    }\n  }\n\n  clear() {\n    this.element.clear();\n    this.dialogs = [];\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Optional,\n  Type\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogComponent } from './dialog.component';\n\nexport interface DialogOptions {\n  index?: number;\n  autoCloseTimeout?: number;\n  closeByClickingOutside?: boolean;\n  backdropColor?: string;\n  customFactory?: ComponentFactory<{}>;\n}\n\nexport class DialogServiceConfig {\n  container: HTMLElement = null;\n}\n\n@Injectable()\nexport class DialogService {\n  /**\n   * Placeholder of modal dialogs\n   */\n  private dialogHolderComponent: DialogHolderComponent;\n\n  /**\n   * HTML container for dialogs\n   * type {HTMLElement}\n   */\n  private container: HTMLElement;\n\n  /**\n   * @param resolver resolver\n   * @param applicationRef applicationRef\n   * @param injector injector\n   * @param config config\n   */\n  constructor(private resolver: ComponentFactoryResolver, private applicationRef: ApplicationRef, private injector: Injector,\n              @Optional() config: DialogServiceConfig) {\n    this.container = config && config.container;\n  }\n\n  /**\n   * Adds dialog\n   * @return Observable<T1>\n   * @param component component\n   * @param data data\n   * @param options options\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    if (!this.dialogHolderComponent) {\n      this.dialogHolderComponent = this.createDialogHolder(options ? options.customFactory : null);\n    }\n    return this.dialogHolderComponent.addDialog<T, T1>(component, data, options);\n  }\n\n  /**\n   * Hides and removes dialog from DOM\n   * @param component DialogComponent\n   */\n  removeDialog(component: DialogComponent<any, any>): void {\n    if (!this.dialogHolderComponent) {\n      return;\n    }\n    this.dialogHolderComponent.removeDialog(component);\n  }\n\n  /**\n   * Closes all dialogs\n   */\n  removeAll(): void {\n    this.dialogHolderComponent.clear();\n    setTimeout(() => {\n      const body = document.querySelector('body');\n      if (body && body.classList) {\n        body.classList.remove('modal-open');\n      }\n    }, 1);\n  }\n\n  /**\n   * Creates and add to DOM dialog holder component\n   * @return DialogHolderComponent\n   */\n  private createDialogHolder(customFactory?: ComponentFactory<{}>): DialogHolderComponent {\n    let componentFactory: any = null;\n\n    if (customFactory) {\n      componentFactory = customFactory;\n    } else {\n      componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);\n    }\n\n    const componentRef = componentFactory.create(this.injector);\n    const componentRootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    if (!this.container) {\n      const componentRootViewContainer = this.applicationRef.components[0];\n      this.container = (componentRootViewContainer.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n    this.applicationRef.attachView(componentRef.hostView);\n\n    componentRef.onDestroy(() => {\n      this.applicationRef.detachView(componentRef.hostView);\n    });\n    this.container.appendChild(componentRootNode);\n\n    return componentRef.instance;\n  }\n}\n","import { ApplicationRef, ComponentFactoryResolver, Injector, ModuleWithProviders, NgModule } from '@angular/core';\nimport { DialogServiceConfig, DialogService } from './dialog.service';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Dialog service factory. Creates dialog service with options\n * @param resolver ComponentFactoryResolver\n * @param applicationRef ApplicationRef\n * @param injector Injector\n * @param options DialogServiceConfig\n * @return DialogService\n */\nexport function dialogServiceFactory(resolver: ComponentFactoryResolver, applicationRef: ApplicationRef, injector: Injector,\n                                     options: DialogServiceConfig) {\n  return new DialogService(resolver, applicationRef, injector, options);\n}\n\n@NgModule({\n  declarations: [\n    DialogHolderComponent,\n    DialogWrapperComponent\n  ],\n  providers: [\n    DialogService\n  ],\n  imports: [\n    CommonModule\n  ],\n  entryComponents: [\n    DialogHolderComponent,\n    DialogWrapperComponent\n  ]\n})\nexport class NgmBootstrapModalModule {\n  static forRoot(config: DialogServiceConfig): ModuleWithProviders {\n    return {\n      ngModule: NgmBootstrapModalModule,\n      providers: [\n        {provide: DialogServiceConfig, useValue: config},\n        {\n          provide: DialogService,\n          useFactory: dialogServiceFactory,\n          deps: [ComponentFactoryResolver, ApplicationRef, Injector, DialogServiceConfig]\n        }\n      ]\n    };\n  }\n}\n","import { OnDestroy } from '@angular/core';\nimport { DialogService } from './dialog.service';\nimport { Observable, Observer } from 'rxjs';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\n\n/**\n * Abstract dialog\n * @template T - dialog data;\n * @template T1 - dialog result\n */\nexport class DialogComponent<T, T1> implements OnDestroy {\n\n  /**\n   * Observer to return result from dialog\n   */\n  private observer: Observer<T1>;\n\n  /**\n   * Dialog result\n   */\n  protected result: T1;\n\n  /**\n   * Dialog wrapper (modal placeholder)\n   */\n  wrapper: DialogWrapperComponent;\n\n  /**\n   * Constructor\n   * @param dialogService - instance of DialogService\n   */\n  constructor(protected dialogService: DialogService) {\n  }\n\n  /**\n   *\n   * @param data T\n   * @return Observable<T1>\n   */\n  fillData(data: T): Observable<T1> {\n    data = data || {} as T;\n    const keys = Object.keys(data);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      this[key] = data[key];\n    }\n    return Observable.create((observer) => {\n      this.observer = observer;\n      return () => {\n        this.close();\n      };\n    });\n  }\n\n  /**\n   * Closes dialog\n   */\n  close(): void {\n    this.dialogService.removeDialog(this);\n  }\n\n  /**\n   * OnDestroy handler\n   * Sends dialog result to observer\n   */\n  ngOnDestroy(): void {\n    if (this.observer) {\n      this.observer.next(this.result);\n    }\n  }\n}\n"]}