{"version":3,"file":"ngm-bootstrap-modal.umd.js","sources":["ng://ngm-bootstrap-modal/lib/dialog-wrapper.component.ts","ng://ngm-bootstrap-modal/lib/dialog-holder.component.ts","ng://ngm-bootstrap-modal/lib/dialog.service.ts","ng://ngm-bootstrap-modal/lib/ngm-bootstrap-modal.module.ts","ng://ngm-bootstrap-modal/lib/dialog.component.ts"],"sourcesContent":["import {\n  Component,\n  ViewContainerRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ReflectiveInjector,\n  Type,\n  ComponentFactory,\n  Provider,\n  Injector,\n  ResolvedReflectiveProvider\n} from '@angular/core';\nimport { DialogComponent } from './dialog.component';\nimport { DialogService } from './dialog.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'dialog-wrapper',\n  template: `\n      <div #container class=\"modal fade\" style=\"display:block !important;\" role=\"dialog\">\n          <ng-template #element></ng-template>\n      </div>\n  `\n})\nexport class DialogWrapperComponent {\n\n  /**\n   * Target element to insert dialog content component\n   */\n  @ViewChild('element', {static: true, read: ViewContainerRef}) public element: ViewContainerRef;\n\n  /**\n   * Link container DOM element\n   */\n  @ViewChild('container', {static: true}) public container;\n\n  /**\n   * Dialog content componet\n   */\n  private content: DialogComponent<any, any>;\n\n  /**\n   * Constructor\n   * @param resolver resolver\n   * @param dialogService dialogService\n   */\n  constructor(private resolver: ComponentFactoryResolver, private dialogService: DialogService) {\n  }\n\n  /**\n   * Adds content dialog component to wrapper\n   * @return DialogComponent\n   * @param component component\n   * @param customFactory customFactory\n   */\n  addComponent<T, T1>(component: Type<DialogComponent<T, T1>>, customFactory?: ComponentFactory<{}>) {\n    const factory = customFactory || this.resolver.resolveComponentFactory(component);\n    const injector = ReflectiveInjector.fromResolvedProviders([], this.element.injector);\n    const componentRef = factory.create(injector);\n    this.element.insert(componentRef.hostView);\n    this.content = componentRef.instance as DialogComponent<T, T1>;\n    this.content.wrapper = this;\n    return this.content;\n  }\n\n  /**\n   * Registers event handler to close dialog by click on backdrop\n   */\n  closeByClickOutside() {\n    const containerEl = this.container.nativeElement;\n    containerEl.querySelector('.modal-content').addEventListener('click', (event) => {\n      event.stopPropagation();\n    });\n    containerEl.addEventListener('click', () => {\n      this.dialogService.removeDialog(this.content);\n    }, false);\n  }\n}\n","import { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, Type } from '@angular/core';\nimport { DialogComponent } from './dialog.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { DialogOptions } from './dialog.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'dialog-holder',\n  template: '<ng-template #element></ng-template>',\n})\nexport class DialogHolderComponent {\n\n  /**\n   * Target element to insert dialogs\n   */\n  @ViewChild('element', {static: true, read: ViewContainerRef}) public element: ViewContainerRef;\n\n  /**\n   * Array of dialogs\n   */\n  dialogs: Array<DialogComponent<any, any>> = [];\n\n  /**\n   * Constructor\n   * @param resolver ComponentFactoryResolver\n   */\n  constructor(private resolver: ComponentFactoryResolver) {\n  }\n\n  /**\n   * Adds dialog\n   * @param component Type<DialogComponent>\n   * @param data object?\n   * @param options DialogOptions?\n   * @return Observable<*>\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    options = options || {} as DialogOptions;\n    const factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);\n    const componentRef = this.element.createComponent(factory, options.index);\n    const dialogWrapper: DialogWrapperComponent = componentRef.instance as DialogWrapperComponent;\n    // tslint:disable-next-line:variable-name\n    const _component: DialogComponent<T, T1> = dialogWrapper.addComponent(component, options.customFactory);\n    if (typeof (options.index) !== 'undefined') {\n      this.dialogs.splice(options.index, 0, _component);\n    } else {\n      this.dialogs.push(_component);\n    }\n    setTimeout(() => {\n      dialogWrapper.container.nativeElement.classList.add('show');\n      dialogWrapper.container.nativeElement.classList.add('in');\n    });\n    if (options.autoCloseTimeout) {\n      setTimeout(() => {\n        this.removeDialog(_component);\n      }, options.autoCloseTimeout);\n    }\n    if (options.closeByClickingOutside) {\n      dialogWrapper.closeByClickOutside();\n    }\n    if (options.backdropColor) {\n      dialogWrapper.container.nativeElement.style.backgroundColor = options.backdropColor;\n    }\n    return _component.fillData(data);\n  }\n\n  /**\n   * Removes dialog\n   * @param component DialogComponent\n   */\n  removeDialog(component: DialogComponent<any, any>) {\n    const element = component.wrapper.container.nativeElement;\n\n    element.classList.remove('show');\n    element.classList.remove('in');\n    setTimeout(() => {\n      this._removeElement(component);\n    }, 300);\n  }\n\n  private _removeElement(component) {\n    const index = this.dialogs.indexOf(component);\n    if (index > -1) {\n      this.element.remove(index);\n      this.dialogs.splice(index, 1);\n    }\n  }\n\n  clear() {\n    this.element.clear();\n    this.dialogs = [];\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Optional,\n  Type\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogComponent } from './dialog.component';\n\nexport interface DialogOptions {\n  index?: number;\n  autoCloseTimeout?: number;\n  closeByClickingOutside?: boolean;\n  backdropColor?: string;\n  customFactory?: ComponentFactory<{}>;\n}\n\nexport class DialogServiceConfig {\n  container: HTMLElement = null;\n}\n\n@Injectable()\nexport class DialogService {\n  /**\n   * Placeholder of modal dialogs\n   */\n  private dialogHolderComponent: DialogHolderComponent;\n\n  /**\n   * HTML container for dialogs\n   * type {HTMLElement}\n   */\n  private container: HTMLElement;\n\n  /**\n   * @param resolver resolver\n   * @param applicationRef applicationRef\n   * @param injector injector\n   * @param config config\n   */\n  constructor(private resolver: ComponentFactoryResolver, private applicationRef: ApplicationRef, private injector: Injector,\n              @Optional() config: DialogServiceConfig) {\n    this.container = config && config.container;\n  }\n\n  /**\n   * Adds dialog\n   * @return Observable<T1>\n   * @param component component\n   * @param data data\n   * @param options options\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    if (!this.dialogHolderComponent) {\n      this.dialogHolderComponent = this.createDialogHolder(options ? options.customFactory : null);\n    }\n    return this.dialogHolderComponent.addDialog<T, T1>(component, data, options);\n  }\n\n  /**\n   * Hides and removes dialog from DOM\n   * @param component DialogComponent\n   */\n  removeDialog(component: DialogComponent<any, any>): void {\n    if (!this.dialogHolderComponent) {\n      return;\n    }\n    this.dialogHolderComponent.removeDialog(component);\n  }\n\n  /**\n   * Closes all dialogs\n   */\n  removeAll(): void {\n    this.dialogHolderComponent.clear();\n    setTimeout(() => {\n      const body = document.querySelector('body');\n      if (body && body.classList) {\n        body.classList.remove('modal-open');\n      }\n    }, 1);\n  }\n\n  /**\n   * Creates and add to DOM dialog holder component\n   * @return DialogHolderComponent\n   */\n  private createDialogHolder(customFactory?: ComponentFactory<{}>): DialogHolderComponent {\n    let componentFactory: any = null;\n\n    if (customFactory) {\n      componentFactory = customFactory;\n    } else {\n      componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);\n    }\n\n    const componentRef = componentFactory.create(this.injector);\n    const componentRootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    if (!this.container) {\n      const componentRootViewContainer = this.applicationRef.components[0];\n      this.container = (componentRootViewContainer.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n    this.applicationRef.attachView(componentRef.hostView);\n\n    componentRef.onDestroy(() => {\n      this.applicationRef.detachView(componentRef.hostView);\n    });\n    this.container.appendChild(componentRootNode);\n\n    return componentRef.instance;\n  }\n}\n","import { ApplicationRef, ComponentFactoryResolver, Injector, ModuleWithProviders, NgModule } from '@angular/core';\nimport { DialogServiceConfig, DialogService } from './dialog.service';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Dialog service factory. Creates dialog service with options\n * @param resolver ComponentFactoryResolver\n * @param applicationRef ApplicationRef\n * @param injector Injector\n * @param options DialogServiceConfig\n * @return DialogService\n */\nexport function dialogServiceFactory(resolver: ComponentFactoryResolver, applicationRef: ApplicationRef, injector: Injector,\n                                     options: DialogServiceConfig) {\n  return new DialogService(resolver, applicationRef, injector, options);\n}\n\n@NgModule({\n  declarations: [\n    DialogHolderComponent,\n    DialogWrapperComponent\n  ],\n  providers: [\n    DialogService\n  ],\n  imports: [\n    CommonModule\n  ],\n  entryComponents: [\n    DialogHolderComponent,\n    DialogWrapperComponent\n  ]\n})\nexport class NgmBootstrapModalModule {\n  static forRoot(config: DialogServiceConfig): ModuleWithProviders {\n    return {\n      ngModule: NgmBootstrapModalModule,\n      providers: [\n        {provide: DialogServiceConfig, useValue: config},\n        {\n          provide: DialogService,\n          useFactory: dialogServiceFactory,\n          deps: [ComponentFactoryResolver, ApplicationRef, Injector, DialogServiceConfig]\n        }\n      ]\n    };\n  }\n}\n","import { OnDestroy } from '@angular/core';\nimport { DialogService } from './dialog.service';\nimport { Observable, Observer } from 'rxjs';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\n\n/**\n * Abstract dialog\n * @template T - dialog data;\n * @template T1 - dialog result\n */\nexport class DialogComponent<T, T1> implements OnDestroy {\n\n  /**\n   * Observer to return result from dialog\n   */\n  private observer: Observer<T1>;\n\n  /**\n   * Dialog result\n   */\n  protected result: T1;\n\n  /**\n   * Dialog wrapper (modal placeholder)\n   */\n  wrapper: DialogWrapperComponent;\n\n  /**\n   * Constructor\n   * @param dialogService - instance of DialogService\n   */\n  constructor(protected dialogService: DialogService) {\n  }\n\n  /**\n   *\n   * @param data T\n   * @return Observable<T1>\n   */\n  fillData(data: T): Observable<T1> {\n    data = data || {} as T;\n    const keys = Object.keys(data);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      this[key] = data[key];\n    }\n    return Observable.create((observer) => {\n      this.observer = observer;\n      return () => {\n        this.close();\n      };\n    });\n  }\n\n  /**\n   * Closes dialog\n   */\n  close(): void {\n    this.dialogService.removeDialog(this);\n  }\n\n  /**\n   * OnDestroy handler\n   * Sends dialog result to observer\n   */\n  ngOnDestroy(): void {\n    if (this.observer) {\n      this.observer.next(this.result);\n    }\n  }\n}\n"],"names":["ReflectiveInjector","Component","ComponentFactoryResolver","ViewChild","ViewContainerRef","Injectable","ApplicationRef","Injector","Optional","NgModule","CommonModule","Observable"],"mappings":"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"}