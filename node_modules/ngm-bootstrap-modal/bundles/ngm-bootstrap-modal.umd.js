(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngm-bootstrap-modal', ['exports', '@angular/core', '@angular/common', 'rxjs'], factory) :
    (global = global || self, factory(global['ngm-bootstrap-modal'] = {}, global.ng.core, global.ng.common, global.rxjs));
}(this, (function (exports, core, common, rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dialog-wrapper.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DialogWrapperComponent = /** @class */ (function () {
        /**
         * Constructor
         * @param resolver resolver
         * @param dialogService dialogService
         */
        function DialogWrapperComponent(resolver, dialogService) {
            this.resolver = resolver;
            this.dialogService = dialogService;
        }
        /**
         * Adds content dialog component to wrapper
         * @return DialogComponent
         * @param component component
         * @param customFactory customFactory
         */
        /**
         * Adds content dialog component to wrapper
         * @template T, T1
         * @param {?} component component
         * @param {?=} customFactory customFactory
         * @return {?} DialogComponent
         */
        DialogWrapperComponent.prototype.addComponent = /**
         * Adds content dialog component to wrapper
         * @template T, T1
         * @param {?} component component
         * @param {?=} customFactory customFactory
         * @return {?} DialogComponent
         */
        function (component, customFactory) {
            /** @type {?} */
            var factory = customFactory || this.resolver.resolveComponentFactory(component);
            /** @type {?} */
            var injector = core.ReflectiveInjector.fromResolvedProviders([], this.element.injector);
            /** @type {?} */
            var componentRef = factory.create(injector);
            this.element.insert(componentRef.hostView);
            this.content = (/** @type {?} */ (componentRef.instance));
            this.content.wrapper = this;
            return this.content;
        };
        /**
         * Registers event handler to close dialog by click on backdrop
         */
        /**
         * Registers event handler to close dialog by click on backdrop
         * @return {?}
         */
        DialogWrapperComponent.prototype.closeByClickOutside = /**
         * Registers event handler to close dialog by click on backdrop
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var containerEl = this.container.nativeElement;
            containerEl.querySelector('.modal-content').addEventListener('click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                event.stopPropagation();
            }));
            containerEl.addEventListener('click', (/**
             * @return {?}
             */
            function () {
                _this.dialogService.removeDialog(_this.content);
            }), false);
        };
        DialogWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'dialog-wrapper',
                        template: "\n      <div #container class=\"modal fade\" style=\"display:block !important;\" role=\"dialog\">\n          <ng-template #element></ng-template>\n      </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        DialogWrapperComponent.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: DialogService }
        ]; };
        DialogWrapperComponent.propDecorators = {
            element: [{ type: core.ViewChild, args: ['element', { static: true, read: core.ViewContainerRef },] }],
            container: [{ type: core.ViewChild, args: ['container', { static: true },] }]
        };
        return DialogWrapperComponent;
    }());
    if (false) {
        /**
         * Target element to insert dialog content component
         * @type {?}
         */
        DialogWrapperComponent.prototype.element;
        /**
         * Link container DOM element
         * @type {?}
         */
        DialogWrapperComponent.prototype.container;
        /**
         * Dialog content componet
         * @type {?}
         * @private
         */
        DialogWrapperComponent.prototype.content;
        /**
         * @type {?}
         * @private
         */
        DialogWrapperComponent.prototype.resolver;
        /**
         * @type {?}
         * @private
         */
        DialogWrapperComponent.prototype.dialogService;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dialog-holder.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DialogHolderComponent = /** @class */ (function () {
        /**
         * Constructor
         * @param resolver ComponentFactoryResolver
         */
        function DialogHolderComponent(resolver) {
            this.resolver = resolver;
            /**
             * Array of dialogs
             */
            this.dialogs = [];
        }
        /**
         * Adds dialog
         * @param component Type<DialogComponent>
         * @param data object?
         * @param options DialogOptions?
         * @return Observable<*>
         */
        /**
         * Adds dialog
         * @template T, T1
         * @param {?} component Type<DialogComponent>
         * @param {?=} data object?
         * @param {?=} options DialogOptions?
         * @return {?} Observable<*>
         */
        DialogHolderComponent.prototype.addDialog = /**
         * Adds dialog
         * @template T, T1
         * @param {?} component Type<DialogComponent>
         * @param {?=} data object?
         * @param {?=} options DialogOptions?
         * @return {?} Observable<*>
         */
        function (component, data, options) {
            var _this = this;
            options = options || (/** @type {?} */ ({}));
            /** @type {?} */
            var factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);
            /** @type {?} */
            var componentRef = this.element.createComponent(factory, options.index);
            /** @type {?} */
            var dialogWrapper = (/** @type {?} */ (componentRef.instance));
            // tslint:disable-next-line:variable-name
            /** @type {?} */
            var _component = dialogWrapper.addComponent(component, options.customFactory);
            if (typeof (options.index) !== 'undefined') {
                this.dialogs.splice(options.index, 0, _component);
            }
            else {
                this.dialogs.push(_component);
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                dialogWrapper.container.nativeElement.classList.add('show');
                dialogWrapper.container.nativeElement.classList.add('in');
            }));
            if (options.autoCloseTimeout) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.removeDialog(_component);
                }), options.autoCloseTimeout);
            }
            if (options.closeByClickingOutside) {
                dialogWrapper.closeByClickOutside();
            }
            if (options.backdropColor) {
                dialogWrapper.container.nativeElement.style.backgroundColor = options.backdropColor;
            }
            return _component.fillData(data);
        };
        /**
         * Removes dialog
         * @param component DialogComponent
         */
        /**
         * Removes dialog
         * @param {?} component DialogComponent
         * @return {?}
         */
        DialogHolderComponent.prototype.removeDialog = /**
         * Removes dialog
         * @param {?} component DialogComponent
         * @return {?}
         */
        function (component) {
            var _this = this;
            /** @type {?} */
            var element = component.wrapper.container.nativeElement;
            element.classList.remove('show');
            element.classList.remove('in');
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this._removeElement(component);
            }), 300);
        };
        /**
         * @private
         * @param {?} component
         * @return {?}
         */
        DialogHolderComponent.prototype._removeElement = /**
         * @private
         * @param {?} component
         * @return {?}
         */
        function (component) {
            /** @type {?} */
            var index = this.dialogs.indexOf(component);
            if (index > -1) {
                this.element.remove(index);
                this.dialogs.splice(index, 1);
            }
        };
        /**
         * @return {?}
         */
        DialogHolderComponent.prototype.clear = /**
         * @return {?}
         */
        function () {
            this.element.clear();
            this.dialogs = [];
        };
        DialogHolderComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'dialog-holder',
                        template: '<ng-template #element></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        DialogHolderComponent.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver }
        ]; };
        DialogHolderComponent.propDecorators = {
            element: [{ type: core.ViewChild, args: ['element', { static: true, read: core.ViewContainerRef },] }]
        };
        return DialogHolderComponent;
    }());
    if (false) {
        /**
         * Target element to insert dialogs
         * @type {?}
         */
        DialogHolderComponent.prototype.element;
        /**
         * Array of dialogs
         * @type {?}
         */
        DialogHolderComponent.prototype.dialogs;
        /**
         * @type {?}
         * @private
         */
        DialogHolderComponent.prototype.resolver;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dialog.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function DialogOptions() { }
    if (false) {
        /** @type {?|undefined} */
        DialogOptions.prototype.index;
        /** @type {?|undefined} */
        DialogOptions.prototype.autoCloseTimeout;
        /** @type {?|undefined} */
        DialogOptions.prototype.closeByClickingOutside;
        /** @type {?|undefined} */
        DialogOptions.prototype.backdropColor;
        /** @type {?|undefined} */
        DialogOptions.prototype.customFactory;
    }
    var DialogServiceConfig = /** @class */ (function () {
        function DialogServiceConfig() {
            this.container = null;
        }
        return DialogServiceConfig;
    }());
    if (false) {
        /** @type {?} */
        DialogServiceConfig.prototype.container;
    }
    var DialogService = /** @class */ (function () {
        /**
         * @param resolver resolver
         * @param applicationRef applicationRef
         * @param injector injector
         * @param config config
         */
        function DialogService(resolver, applicationRef, injector, config) {
            this.resolver = resolver;
            this.applicationRef = applicationRef;
            this.injector = injector;
            this.container = config && config.container;
        }
        /**
         * Adds dialog
         * @return Observable<T1>
         * @param component component
         * @param data data
         * @param options options
         */
        /**
         * Adds dialog
         * @template T, T1
         * @param {?} component component
         * @param {?=} data data
         * @param {?=} options options
         * @return {?} Observable<T1>
         */
        DialogService.prototype.addDialog = /**
         * Adds dialog
         * @template T, T1
         * @param {?} component component
         * @param {?=} data data
         * @param {?=} options options
         * @return {?} Observable<T1>
         */
        function (component, data, options) {
            if (!this.dialogHolderComponent) {
                this.dialogHolderComponent = this.createDialogHolder(options ? options.customFactory : null);
            }
            return this.dialogHolderComponent.addDialog(component, data, options);
        };
        /**
         * Hides and removes dialog from DOM
         * @param component DialogComponent
         */
        /**
         * Hides and removes dialog from DOM
         * @param {?} component DialogComponent
         * @return {?}
         */
        DialogService.prototype.removeDialog = /**
         * Hides and removes dialog from DOM
         * @param {?} component DialogComponent
         * @return {?}
         */
        function (component) {
            if (!this.dialogHolderComponent) {
                return;
            }
            this.dialogHolderComponent.removeDialog(component);
        };
        /**
         * Closes all dialogs
         */
        /**
         * Closes all dialogs
         * @return {?}
         */
        DialogService.prototype.removeAll = /**
         * Closes all dialogs
         * @return {?}
         */
        function () {
            this.dialogHolderComponent.clear();
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var body = document.querySelector('body');
                if (body && body.classList) {
                    body.classList.remove('modal-open');
                }
            }), 1);
        };
        /**
         * Creates and add to DOM dialog holder component
         * @return DialogHolderComponent
         */
        /**
         * Creates and add to DOM dialog holder component
         * @private
         * @param {?=} customFactory
         * @return {?} DialogHolderComponent
         */
        DialogService.prototype.createDialogHolder = /**
         * Creates and add to DOM dialog holder component
         * @private
         * @param {?=} customFactory
         * @return {?} DialogHolderComponent
         */
        function (customFactory) {
            var _this = this;
            /** @type {?} */
            var componentFactory = null;
            if (customFactory) {
                componentFactory = customFactory;
            }
            else {
                componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);
            }
            /** @type {?} */
            var componentRef = componentFactory.create(this.injector);
            /** @type {?} */
            var componentRootNode = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
            if (!this.container) {
                /** @type {?} */
                var componentRootViewContainer = this.applicationRef.components[0];
                this.container = (/** @type {?} */ (((/** @type {?} */ (componentRootViewContainer.hostView))).rootNodes[0]));
            }
            this.applicationRef.attachView(componentRef.hostView);
            componentRef.onDestroy((/**
             * @return {?}
             */
            function () {
                _this.applicationRef.detachView(componentRef.hostView);
            }));
            this.container.appendChild(componentRootNode);
            return componentRef.instance;
        };
        DialogService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DialogService.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: core.ApplicationRef },
            { type: core.Injector },
            { type: DialogServiceConfig, decorators: [{ type: core.Optional }] }
        ]; };
        return DialogService;
    }());
    if (false) {
        /**
         * Placeholder of modal dialogs
         * @type {?}
         * @private
         */
        DialogService.prototype.dialogHolderComponent;
        /**
         * HTML container for dialogs
         * type {HTMLElement}
         * @type {?}
         * @private
         */
        DialogService.prototype.container;
        /**
         * @type {?}
         * @private
         */
        DialogService.prototype.resolver;
        /**
         * @type {?}
         * @private
         */
        DialogService.prototype.applicationRef;
        /**
         * @type {?}
         * @private
         */
        DialogService.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngm-bootstrap-modal.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Dialog service factory. Creates dialog service with options
     * @param {?} resolver ComponentFactoryResolver
     * @param {?} applicationRef ApplicationRef
     * @param {?} injector Injector
     * @param {?} options DialogServiceConfig
     * @return {?} DialogService
     */
    function dialogServiceFactory(resolver, applicationRef, injector, options) {
        return new DialogService(resolver, applicationRef, injector, options);
    }
    var NgmBootstrapModalModule = /** @class */ (function () {
        function NgmBootstrapModalModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        NgmBootstrapModalModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            return {
                ngModule: NgmBootstrapModalModule,
                providers: [
                    { provide: DialogServiceConfig, useValue: config },
                    {
                        provide: DialogService,
                        useFactory: dialogServiceFactory,
                        deps: [core.ComponentFactoryResolver, core.ApplicationRef, core.Injector, DialogServiceConfig]
                    }
                ]
            };
        };
        NgmBootstrapModalModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DialogHolderComponent,
                            DialogWrapperComponent
                        ],
                        providers: [
                            DialogService
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        entryComponents: [
                            DialogHolderComponent,
                            DialogWrapperComponent
                        ]
                    },] }
        ];
        return NgmBootstrapModalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dialog.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Abstract dialog
     * @template T, T1
     */
    var   /**
     * Abstract dialog
     * @template T, T1
     */
    DialogComponent = /** @class */ (function () {
        /**
         * Constructor
         * @param dialogService - instance of DialogService
         */
        function DialogComponent(dialogService) {
            this.dialogService = dialogService;
        }
        /**
         *
         * @param data T
         * @return Observable<T1>
         */
        /**
         *
         * @param {?} data T
         * @return {?} Observable<T1>
         */
        DialogComponent.prototype.fillData = /**
         *
         * @param {?} data T
         * @return {?} Observable<T1>
         */
        function (data) {
            var _this = this;
            data = data || (/** @type {?} */ ({}));
            /** @type {?} */
            var keys = Object.keys(data);
            for (var i = 0, length_1 = keys.length; i < length_1; i++) {
                /** @type {?} */
                var key = keys[i];
                this[key] = data[key];
            }
            return rxjs.Observable.create((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                _this.observer = observer;
                return (/**
                 * @return {?}
                 */
                function () {
                    _this.close();
                });
            }));
        };
        /**
         * Closes dialog
         */
        /**
         * Closes dialog
         * @return {?}
         */
        DialogComponent.prototype.close = /**
         * Closes dialog
         * @return {?}
         */
        function () {
            this.dialogService.removeDialog(this);
        };
        /**
         * OnDestroy handler
         * Sends dialog result to observer
         */
        /**
         * OnDestroy handler
         * Sends dialog result to observer
         * @return {?}
         */
        DialogComponent.prototype.ngOnDestroy = /**
         * OnDestroy handler
         * Sends dialog result to observer
         * @return {?}
         */
        function () {
            if (this.observer) {
                this.observer.next(this.result);
            }
        };
        return DialogComponent;
    }());
    if (false) {
        /**
         * Observer to return result from dialog
         * @type {?}
         * @private
         */
        DialogComponent.prototype.observer;
        /**
         * Dialog result
         * @type {?}
         * @protected
         */
        DialogComponent.prototype.result;
        /**
         * Dialog wrapper (modal placeholder)
         * @type {?}
         */
        DialogComponent.prototype.wrapper;
        /**
         * @type {?}
         * @protected
         */
        DialogComponent.prototype.dialogService;
    }

    exports.DialogComponent = DialogComponent;
    exports.DialogService = DialogService;
    exports.DialogServiceConfig = DialogServiceConfig;
    exports.NgmBootstrapModalModule = NgmBootstrapModalModule;
    exports.ɵa = dialogServiceFactory;
    exports.ɵb = DialogHolderComponent;
    exports.ɵc = DialogWrapperComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngm-bootstrap-modal.umd.js.map
