{"version":3,"file":"ngm-bootstrap-modal.js","sources":["ng://ngm-bootstrap-modal/lib/dialog-wrapper.component.ts","ng://ngm-bootstrap-modal/lib/dialog-holder.component.ts","ng://ngm-bootstrap-modal/lib/dialog.service.ts","ng://ngm-bootstrap-modal/lib/ngm-bootstrap-modal.module.ts","ng://ngm-bootstrap-modal/lib/dialog.component.ts"],"sourcesContent":["import {\n  Component,\n  ViewContainerRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ReflectiveInjector,\n  Type,\n  ComponentFactory,\n  Provider,\n  Injector,\n  ResolvedReflectiveProvider\n} from '@angular/core';\nimport { DialogComponent } from './dialog.component';\nimport { DialogService } from './dialog.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'dialog-wrapper',\n  template: `\n      <div #container class=\"modal fade\" style=\"display:block !important;\" role=\"dialog\">\n          <ng-template #element></ng-template>\n      </div>\n  `\n})\nexport class DialogWrapperComponent {\n\n  /**\n   * Target element to insert dialog content component\n   */\n  @ViewChild('element', {static: true, read: ViewContainerRef}) public element: ViewContainerRef;\n\n  /**\n   * Link container DOM element\n   */\n  @ViewChild('container', {static: true}) public container;\n\n  /**\n   * Dialog content componet\n   */\n  private content: DialogComponent<any, any>;\n\n  /**\n   * Constructor\n   * @param resolver resolver\n   * @param dialogService dialogService\n   */\n  constructor(private resolver: ComponentFactoryResolver, private dialogService: DialogService) {\n  }\n\n  /**\n   * Adds content dialog component to wrapper\n   * @return DialogComponent\n   * @param component component\n   * @param customFactory customFactory\n   */\n  addComponent<T, T1>(component: Type<DialogComponent<T, T1>>, customFactory?: ComponentFactory<{}>) {\n    const factory = customFactory || this.resolver.resolveComponentFactory(component);\n    const injector = ReflectiveInjector.fromResolvedProviders([], this.element.injector);\n    const componentRef = factory.create(injector);\n    this.element.insert(componentRef.hostView);\n    this.content = componentRef.instance as DialogComponent<T, T1>;\n    this.content.wrapper = this;\n    return this.content;\n  }\n\n  /**\n   * Registers event handler to close dialog by click on backdrop\n   */\n  closeByClickOutside() {\n    const containerEl = this.container.nativeElement;\n    containerEl.querySelector('.modal-content').addEventListener('click', (event) => {\n      event.stopPropagation();\n    });\n    containerEl.addEventListener('click', () => {\n      this.dialogService.removeDialog(this.content);\n    }, false);\n  }\n}\n","import { Component, ViewChild, ViewContainerRef, ComponentFactoryResolver, Type } from '@angular/core';\nimport { DialogComponent } from './dialog.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { DialogOptions } from './dialog.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'dialog-holder',\n  template: '<ng-template #element></ng-template>',\n})\nexport class DialogHolderComponent {\n\n  /**\n   * Target element to insert dialogs\n   */\n  @ViewChild('element', {static: true, read: ViewContainerRef}) public element: ViewContainerRef;\n\n  /**\n   * Array of dialogs\n   */\n  dialogs: Array<DialogComponent<any, any>> = [];\n\n  /**\n   * Constructor\n   * @param resolver ComponentFactoryResolver\n   */\n  constructor(private resolver: ComponentFactoryResolver) {\n  }\n\n  /**\n   * Adds dialog\n   * @param component Type<DialogComponent>\n   * @param data object?\n   * @param options DialogOptions?\n   * @return Observable<*>\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    options = options || {} as DialogOptions;\n    const factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);\n    const componentRef = this.element.createComponent(factory, options.index);\n    const dialogWrapper: DialogWrapperComponent = componentRef.instance as DialogWrapperComponent;\n    // tslint:disable-next-line:variable-name\n    const _component: DialogComponent<T, T1> = dialogWrapper.addComponent(component, options.customFactory);\n    if (typeof (options.index) !== 'undefined') {\n      this.dialogs.splice(options.index, 0, _component);\n    } else {\n      this.dialogs.push(_component);\n    }\n    setTimeout(() => {\n      dialogWrapper.container.nativeElement.classList.add('show');\n      dialogWrapper.container.nativeElement.classList.add('in');\n    });\n    if (options.autoCloseTimeout) {\n      setTimeout(() => {\n        this.removeDialog(_component);\n      }, options.autoCloseTimeout);\n    }\n    if (options.closeByClickingOutside) {\n      dialogWrapper.closeByClickOutside();\n    }\n    if (options.backdropColor) {\n      dialogWrapper.container.nativeElement.style.backgroundColor = options.backdropColor;\n    }\n    return _component.fillData(data);\n  }\n\n  /**\n   * Removes dialog\n   * @param component DialogComponent\n   */\n  removeDialog(component: DialogComponent<any, any>) {\n    const element = component.wrapper.container.nativeElement;\n\n    element.classList.remove('show');\n    element.classList.remove('in');\n    setTimeout(() => {\n      this._removeElement(component);\n    }, 300);\n  }\n\n  private _removeElement(component) {\n    const index = this.dialogs.indexOf(component);\n    if (index > -1) {\n      this.element.remove(index);\n      this.dialogs.splice(index, 1);\n    }\n  }\n\n  clear() {\n    this.element.clear();\n    this.dialogs = [];\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Optional,\n  Type\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogComponent } from './dialog.component';\n\nexport interface DialogOptions {\n  index?: number;\n  autoCloseTimeout?: number;\n  closeByClickingOutside?: boolean;\n  backdropColor?: string;\n  customFactory?: ComponentFactory<{}>;\n}\n\nexport class DialogServiceConfig {\n  container: HTMLElement = null;\n}\n\n@Injectable()\nexport class DialogService {\n  /**\n   * Placeholder of modal dialogs\n   */\n  private dialogHolderComponent: DialogHolderComponent;\n\n  /**\n   * HTML container for dialogs\n   * type {HTMLElement}\n   */\n  private container: HTMLElement;\n\n  /**\n   * @param resolver resolver\n   * @param applicationRef applicationRef\n   * @param injector injector\n   * @param config config\n   */\n  constructor(private resolver: ComponentFactoryResolver, private applicationRef: ApplicationRef, private injector: Injector,\n              @Optional() config: DialogServiceConfig) {\n    this.container = config && config.container;\n  }\n\n  /**\n   * Adds dialog\n   * @return Observable<T1>\n   * @param component component\n   * @param data data\n   * @param options options\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    if (!this.dialogHolderComponent) {\n      this.dialogHolderComponent = this.createDialogHolder(options ? options.customFactory : null);\n    }\n    return this.dialogHolderComponent.addDialog<T, T1>(component, data, options);\n  }\n\n  /**\n   * Hides and removes dialog from DOM\n   * @param component DialogComponent\n   */\n  removeDialog(component: DialogComponent<any, any>): void {\n    if (!this.dialogHolderComponent) {\n      return;\n    }\n    this.dialogHolderComponent.removeDialog(component);\n  }\n\n  /**\n   * Closes all dialogs\n   */\n  removeAll(): void {\n    this.dialogHolderComponent.clear();\n    setTimeout(() => {\n      const body = document.querySelector('body');\n      if (body && body.classList) {\n        body.classList.remove('modal-open');\n      }\n    }, 1);\n  }\n\n  /**\n   * Creates and add to DOM dialog holder component\n   * @return DialogHolderComponent\n   */\n  private createDialogHolder(customFactory?: ComponentFactory<{}>): DialogHolderComponent {\n    let componentFactory: any = null;\n\n    if (customFactory) {\n      componentFactory = customFactory;\n    } else {\n      componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);\n    }\n\n    const componentRef = componentFactory.create(this.injector);\n    const componentRootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    if (!this.container) {\n      const componentRootViewContainer = this.applicationRef.components[0];\n      this.container = (componentRootViewContainer.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n    this.applicationRef.attachView(componentRef.hostView);\n\n    componentRef.onDestroy(() => {\n      this.applicationRef.detachView(componentRef.hostView);\n    });\n    this.container.appendChild(componentRootNode);\n\n    return componentRef.instance;\n  }\n}\n","import { ApplicationRef, ComponentFactoryResolver, Injector, ModuleWithProviders, NgModule } from '@angular/core';\nimport { DialogServiceConfig, DialogService } from './dialog.service';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Dialog service factory. Creates dialog service with options\n * @param resolver ComponentFactoryResolver\n * @param applicationRef ApplicationRef\n * @param injector Injector\n * @param options DialogServiceConfig\n * @return DialogService\n */\nexport function dialogServiceFactory(resolver: ComponentFactoryResolver, applicationRef: ApplicationRef, injector: Injector,\n                                     options: DialogServiceConfig) {\n  return new DialogService(resolver, applicationRef, injector, options);\n}\n\n@NgModule({\n  declarations: [\n    DialogHolderComponent,\n    DialogWrapperComponent\n  ],\n  providers: [\n    DialogService\n  ],\n  imports: [\n    CommonModule\n  ],\n  entryComponents: [\n    DialogHolderComponent,\n    DialogWrapperComponent\n  ]\n})\nexport class NgmBootstrapModalModule {\n  static forRoot(config: DialogServiceConfig): ModuleWithProviders {\n    return {\n      ngModule: NgmBootstrapModalModule,\n      providers: [\n        {provide: DialogServiceConfig, useValue: config},\n        {\n          provide: DialogService,\n          useFactory: dialogServiceFactory,\n          deps: [ComponentFactoryResolver, ApplicationRef, Injector, DialogServiceConfig]\n        }\n      ]\n    };\n  }\n}\n","import { OnDestroy } from '@angular/core';\nimport { DialogService } from './dialog.service';\nimport { Observable, Observer } from 'rxjs';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\n\n/**\n * Abstract dialog\n * @template T - dialog data;\n * @template T1 - dialog result\n */\nexport class DialogComponent<T, T1> implements OnDestroy {\n\n  /**\n   * Observer to return result from dialog\n   */\n  private observer: Observer<T1>;\n\n  /**\n   * Dialog result\n   */\n  protected result: T1;\n\n  /**\n   * Dialog wrapper (modal placeholder)\n   */\n  wrapper: DialogWrapperComponent;\n\n  /**\n   * Constructor\n   * @param dialogService - instance of DialogService\n   */\n  constructor(protected dialogService: DialogService) {\n  }\n\n  /**\n   *\n   * @param data T\n   * @return Observable<T1>\n   */\n  fillData(data: T): Observable<T1> {\n    data = data || {} as T;\n    const keys = Object.keys(data);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      this[key] = data[key];\n    }\n    return Observable.create((observer) => {\n      this.observer = observer;\n      return () => {\n        this.close();\n      };\n    });\n  }\n\n  /**\n   * Closes dialog\n   */\n  close(): void {\n    this.dialogService.removeDialog(this);\n  }\n\n  /**\n   * OnDestroy handler\n   * Sends dialog result to observer\n   */\n  ngOnDestroy(): void {\n    if (this.observer) {\n      this.observer.next(this.result);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}